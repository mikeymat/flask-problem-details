Metadata-Version: 2.1
Name: flask-problem-details
Version: 0.0.5
Summary: A package that implements problem details errors in Flask App
Author: Michelangelo Matina
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: flask-openapi3>=4.0.3
Requires-Dist: pydantic>=2.10.4

# Flask OpenAPI Error Handling Module

## Overview
This module enhances Flask applications using Flask OpenAPI and Pydantic by introducing structured error handling based on the [RFC 7807 Problem Details for HTTP APIs](https://datatracker.ietf.org/doc/html/rfc7807). It supports automatic validation error handling and provides detailed error responses, optionally including stack traces.

---

## Features
- **Problem Details Specification:** Conforms to the Problem Details for HTTP APIs standard.
- **Automatic Error Handling:** Registers handlers for common exceptions like validation errors and server-side issues.
- **Configurable Stack Traces:** Optionally include stack traces in error responses for easier debugging.

---

## Installation
```bash
pip install flask-problem-details
```

---

## Usage

### 1. Configure the Application
```python
from flask_openapi3 import OpenAPI, Info
from controller.asset import controller as asset_controller

from flask_problem_details import configure_app

# OpenAPI information
info: Info = Info(title="Flask OpenAPI 3 Example", version="1.0.0")
openapi_builder : OpenAPI = lambda args : OpenAPI(__name__, info=info, **args)

app : OpenAPI = configure_app(app_builder = openapi_builder, with_traceback=False)

app.register_api(asset_controller)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=3000, debug=True)
```
### 2. Raise the Problem
```python
from flask_openapi3 import Tag, APIBlueprint
from model.asset import AssetUploadParameters
from flask_problem_details import ProblemDetailsError
from werkzeug.exceptions import ExpectationFailed

tag = Tag(name="Asset", description="Asset controller")
controller = APIBlueprint('/assets', __name__, url_prefix='/', abp_tags=[tag], doc_ui=True)

@controller.post("upload/1/")
def upload_first(query: AssetUploadParameters):
    raise ProblemDetailsError.from_exception(ValueError("test"))

@controller.post("upload/2/")
def upload_second(query: AssetUploadParameters):
    raise ExpectationFailed()
```

### 3. Error Response Example
When an error occurs, the module returns a JSON response similar to:
```json
{
  "status": 417,
  "title": "ExpectationFailed",
  "detail": "The server could not meet the requirements of the Expect header",
  "type": "ExpectationFailed",
  "traceback": null,
  "extras": {}
}
```

---

## Core Components

### **Error Classes**
1. **`ProblemDetails`**: A Pydantic model representing the structure of an error response.
2. **`ProblemDetailsError`**: Custom exception class for handling problems.


### **Configuration Functions**
- `configure_app(app_builder, with_traceback=False)`: Sets up the application with error handling.
- `activate_traceback() / deactivate_traceback()`: Enable or disable traceback inclusion.

---

## Extending the Module
To add custom error handling, register additional error handlers using Flask's `register_error_handler` method:
```python
@app.errorhandler(CustomException)
def handle_custom_exception(e):
    return ProblemDetailsError.from_exception(e).to_http_response()
```

---

## License
This module is provided under the MIT License.

---

## Contributions
Contributions are welcome! Submit a pull request or open an issue on GitHub.

---

## References
- [Flask Documentation](https://flask.palletsprojects.com/)
- [Flask OpenAPI 3 Documentation](https://luolingchun.github.io/flask-openapi3/v4.x/Usage/Specification/)
- [Pydantic Documentation](https://pydantic-docs.helpmanual.io/)
